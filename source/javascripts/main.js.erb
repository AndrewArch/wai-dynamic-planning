(function () {
  'use strict';

  var addclass = function(el, className) {
    if (el.classList)
      el.classList.add(className);
    else
      el.className += ' ' + className;
  };

  function removeClass(el, className) {
    if (el.classList) {
      el.classList.remove(className);
    } else {
      el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
    }
  }

  function hasClass(el, className) {
    if (el.classList) {
      return el.classList.contains(className);
    } else {
      return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);
    }
  }

  function forEachElement(elements, fn) {
    for (var i = 0; i < elements.length; i++)
      fn(elements[i], i);
  }

  var myCarousel = (function() {
    var carousel, slides, index, slidenav, settings, timer, setFocus, animationSuspended, announceSlide = false;

    function init(set) {
      settings = set;
      carousel = document.getElementById(settings.id);
      slides = carousel.querySelectorAll('.slide');
     
      carousel.className = 'active carousel';

      var ctrls = document.createElement('ul');

      ctrls.className = 'controls';
      ctrls.innerHTML = '<li>' +
      '<button type="button" class="btn-prev">Previous</button>' +
      '</li>' +
      '<li>' +
      '<button type="button" class="btn-next">Next</button>' +
      '</li>';

      ctrls.querySelector('.btn-prev')
      .addEventListener('click', function () {
        announceSlide = true;
        prevSlide();
      });
      ctrls.querySelector('.btn-next')
      .addEventListener('click', function () {
        announceSlide = true;
        nextSlide();
      });

      carousel.appendChild(ctrls);

      if (settings.slidenav || settings.animate) {
        slidenav = document.createElement('ul');

        slidenav.className = 'slidenav';

        if (settings.animate) {
          var li = document.createElement('li');

          if (settings.startAnimated) {
            li.innerHTML = '<button data-action="stop"><span class="visuallyhidden">Stop Animation </span>￭</button>';
          } else {
            li.innerHTML = '<button data-action="start"><span class="visuallyhidden">Start Animation </span>▶</button>';
          }

          slidenav.appendChild(li);
        }

        if (settings.slidenav) {
          forEachElement(slides, function(el, i){
            var li = document.createElement('li');
            var klass = (i===0) ? 'class="current" ' : '';
            var kurrent = (i===0) ? ' <span class="visuallyhidden">(Current Slide)</span>' : '';

            li.innerHTML = '<button '+ klass +'data-slide="' + i + '"><span class="visuallyhidden">News</span> ' + (i+1) + kurrent + '</button>';
            slidenav.appendChild(li);
          });
        }

        slidenav.addEventListener('click', function(event) {
          var button = event.target;
          if (button.localName == 'button') {
            if (button.getAttribute('data-slide')) {
              stopAnimation();
              setSlides(button.getAttribute('data-slide'), true);
            } else if (button.getAttribute('data-action') == "stop") {
              stopAnimation();
            } else if (button.getAttribute('data-action') == "start") {
              startAnimation();
            }
          }
        }, true);

        carousel.className = 'active carousel with-slidenav';
        carousel.appendChild(slidenav);
      }

      slides[0].parentNode.addEventListener('transitionend', function (event) {
        var slide = event.target;
        removeClass(slide, 'in-transition');
        if (hasClass(slide, 'current'))  {
          slide.removeAttribute('aria-live');
          announceSlide = false;
          if(setFocus) {
            slide.setAttribute('tabindex', '-1');
            slide.focus();
            setFocus = false;
          }
        }
      });

      carousel.addEventListener('mouseenter', suspendAnimation);
      carousel.addEventListener('mouseleave', function(event) {
        if (animationSuspended) {
          startAnimation();
        }
      });

      carousel.addEventListener('focusin', function(event) {
        if (!hasClass(event.target, 'slide')) {
          suspendAnimation();
        }
      });
      carousel.addEventListener('focusout', function(event) {
        if (!hasClass(event.target, 'slide') && animationSuspended) {
          startAnimation();
        }
      });

      // Add event handlers to scroll the carousel from the navigation
      if(settings.nav_id) {
        var navigation = carousel.querySelectorAll('#' + settings.nav_id + ' a');
        for (var i = 0; i < navigation.length; i++) {
          navigation[i].addEventListener('click', function(x) {
            announceSlide = true;
            setSlides(x, false, 'prev');
          }.bind(this, i));
        }
      }

      index = 0;
      setSlides(index);

      if (settings.startAnimated) {
        timer = setTimeout(nextSlide, 5000);
      }
    }

    function setSlides(new_current, setFocusHere, transition) {
      setFocus = typeof setFocusHere !== 'undefined' ? setFocusHere : false;
      transition = typeof transition !== 'undefined' ? transition : 'none';

      new_current = parseFloat(new_current);

      var length = slides.length;
      var new_next = new_current+1;
      var new_prev = new_current-1;

      if(new_next === length) {
        new_next = 0;
      } else if(new_prev < 0) {
        new_prev = length-1;
      }

      for (var i = slides.length - 1; i >= 0; i--) {
        slides[i].className = "slide";
      }

      slides[new_next].className = 'next slide' + ((transition == 'next') ? ' in-transition' : '');
      slides[new_next].setAttribute('aria-hidden', 'true');
      slides[new_prev].className = 'prev slide' + ((transition == 'prev') ? ' in-transition' : '');
      slides[new_prev].setAttribute('aria-hidden', 'true');

      slides[new_current].className = 'current slide';
      slides[new_current].removeAttribute('aria-hidden');
      if (announceSlide) {
        slides[new_current].setAttribute('aria-live', 'polite');
      }

      if(settings.slidenav) {
        var buttons = carousel.querySelectorAll('.slidenav button[data-slide]');
        for (var j = buttons.length - 1; j >= 0; j--) {
          buttons[j].className = '';
          buttons[j].innerHTML = '<span class="visuallyhidden">News</span> ' + (j+1);
        }
        buttons[new_current].className = "current";
        buttons[new_current].innerHTML = '<span class="visuallyhidden">News</span> ' + (new_current+1) + ' <span class="visuallyhidden">(Current Slide)</span>';
      }

      index = new_current;

    }

    function nextSlide() {

      var length = slides.length,
      new_current = index + 1;

      if(new_current === length) {
        new_current = 0;
      }

      setSlides(new_current, false, 'prev');

      if (settings.animate) {
        timer = setTimeout(nextSlide, 5000);
      }

    }

    function prevSlide() {
      var length = slides.length,
      new_current = index - 1;

      if(new_current < 0) {
        new_current = length-1;
      }

      setSlides(new_current, false, 'next');

    }

    function stopAnimation() {
      clearTimeout(timer);
      settings.animate = false;
      animationSuspended = false;
      _this = carousel.querySelector('[data-action]');
      _this.innerHTML = '<span class="visuallyhidden">Start Animation </span>▶';
      _this.setAttribute('data-action', 'start');
    }

    function startAnimation() {
      settings.animate = true;
      animationSuspended = false;
      timer = setTimeout(nextSlide, 5000);
      _this = carousel.querySelector('[data-action]');
      _this.innerHTML = '<span class="visuallyhidden">Stop Animation </span>￭';
      _this.setAttribute('data-action', 'stop');
    }

    function suspendAnimation() {
      if(settings.animate) {
        clearTimeout(timer);
        settings.animate = false;
        animationSuspended = true;
      }
    }

    return {
      init:init,
      next:nextSlide,
      prev:prevSlide,
      goto:setSlides,
      stop:stopAnimation,
      start:startAnimation
    };
  });

  var c = new myCarousel();
  c.init({
    id: 'carousel',
    nav_id: 'carousel-nav',
    slidenav: false,
    animate: false,
    startAnimated: false
  });
}());